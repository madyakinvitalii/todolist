version: '3.9'
services:
  front:
    image: sermalenk/skypro-front:lesson-38
    container_name: front
    restart: on-failure
    depends_on:
      api:
        condition: service_started
      collect_static:
        condition: service_completed_successfully
    ports:
      - "80:80"
    volumes:
      - ./django_static:/usr/share/nginx/html/static
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

  collect_static:
    image: vitaliimadiakin/todolist:$GITHUB_RUN_ID
    container_name: collect_static
    env_file: .env
    command: python manage.py collectstatic -c --no-input
    volumes:
      - ./django_static:/app/static/

  api:
    image: vitaliimadiakin/todolist:$GITHUB_RUN_ID
    container_name: api
    ports:
      - '8000:8000'
    depends_on:
      pg:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  bot:
    image: vitaliimadiakin/todolist:$GITHUB_RUN_ID
    container_name: bot
    depends_on:
      pg:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: python manage.py runbot

  migrations:
    image: vitaliimadiakin/todolist:$GITHUB_RUN_ID
    container_name: migrations
    depends_on:
      pg:
        condition: service_healthy
    command: >
      bash -c "python manage.py makemigrations && python manage.py migrate"

  pg:
    image: postgres:latest
    container_name: pg
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5